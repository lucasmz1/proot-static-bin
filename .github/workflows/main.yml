name: build

on:
  schedule:
    - cron: "0 6 * * 0"
  push:
    branches:
      - master

jobs:
  build:
    name: 'setup vm'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false

    steps:
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
    
      - name: Create Buildx Builder
        run: |
          docker buildx create --name mybuilder --use
          docker buildx inspect --bootstrap
          
      - name: Pull AMD64 Alpine Image
        run: |
          docker pull --platform=linux/amd64 alpine:latest
          docker run --rm -v ${GITHUB_WORKSPACE}:${GITHUB_WORKSPACE} -w ${GITHUB_WORKSPACE} alpine:latest sh -c "
          apk update && \
          apk add --no-cache \
          p7zip \
          bash \
          binutils \
          build-base \
          clang \
          coreutils \
          curl \
          findutils \
          file \
          g++ \
          git \
          grep \
          jq \
          libc-dev \
          linux-headers \
          moreutils \
          rsync \
          tar \
          tree \
          util-linux \
          xz \
          zstd"
          mkdir dist
          export CC=clang
          export CXX=clang++
          make -C src loader.elf build.h
          export CFLAGS="-I/usr/include/libxml2"
          export LDFLAGS="-Wl,--no-as-needed -static -lz -lexpat -ltalloc"
          make -C src proot care V=1
          ##make -C src prefix=$PWD/dist/ install
          find ./src/ -iname 'proot' | xargs -i -t mv {} dist/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: proot place
          path: 'dist/*proot*'

  release:
    needs: [build]
    permissions:
      contents: write
    runs-on: ubuntu-latest

    steps:
      - name: Download proot artifact
        uses: actions/download-artifact@v4
        with:
          name: proot place

      - name: Delete Previous Release
        run: |
          gh release delete "${APP_VERSION}" --repo "${GITHUB_REPOSITORY}" --cleanup-tag -y || echo "No release to delete"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: "Continuous universal"
          tag_name: continuous-universal
          prerelease: false
          draft: false
          generate_release_notes: false
          make_latest: true
          files: |
            *.tar.xz*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
