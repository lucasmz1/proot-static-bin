name: build

on:
  schedule:
    - cron: "0 6 * * 0"
  workflow_dispatch:
  push:
    branches:
      - master

jobs:
  build:
    name: 'setup vm'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install build dependencies
        run: |
          set -eux
          sudo apt-get update -qq
          sudo apt-get install -qq librdkafka1 librdkafka-dev curl gdb lcov libc6-dev libarchive-dev libtalloc-dev sloccount libexpat1-dev strace swig uthash-dev python3-dev lzop wget binutils libexpat-dev zlib1g-dev
          sudo apt-get install -qq build-essential pkg-config git golang-go
          wget -c -q https://sonarcloud.io/static/cpp/build-wrapper-linux-x86.zip 
          unzip build-wrapper-linux-x86.zip 
          chmod +x ./build-wrapper-linux-x86/build-wrapper-linux-x86-64
          echo "$PWD/build-wrapper-linux-x86" >> $GITHUB_PATH
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 20
          sudo apt-get install -qq clang clang-tools curl gcc gdb git lcov libarchive-dev make sloccount strace swig libtalloc-dev uthash-dev
          
      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
         distribution: 'temurin'
         java-version: '17'

      - name: Build static binaries
        run: |
          mkdir tmp
          export CC=clang
          export CXX=clang++
          make -C src loader.elf build.h
          export CFLAGS="-I/usr/include/libxml2"
          export LDFLAGS="-L/usr/lib/x86_64-linux-gnu -lexpat -lz"
          make -C src proot care V=1

      - name: Skip Docker tests and run necessary checks
        run: |
          build-wrapper-linux-x86-64 --out-dir ./tmp/
          grep -v "test-docker" test.log || true  # Remove erro do test-docker

      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONARCLOUD_TOKEN }}
        run: |
          sonar-scanner --define sonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}"
